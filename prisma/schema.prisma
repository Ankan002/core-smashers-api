generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum EngineeringBranch {
  mechanical
}

enum QuestionTopics {
  thermo_dynamics
  strength_of_material
  fluid_dynamics
}

enum ChallengeType {
  aptitude
  technical
}

enum QuestionAnswerResult {
  correct
  wrong
}

enum QuestionDifficulty {
  easy
  medium
  hard
}

enum CorrectOptionType {
  option_one
  option_two
  option_three
  option_four
}

model User {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  avatar             String
  username           String               @unique
  email              String               @unique
  provider_id        String               @unique
  updatedAt          DateTime             @updatedAt
  createdAt          DateTime             @default(now())
  Profile            Profile[]
  Rating             Rating[]
  ChallengeAttempted ChallengeAttempted[]
  QuestionAttempted  QuestionAttempted[]
}

model Profile {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user           User               @relation(fields: [userId], references: [id])
  userId         String             @db.Uuid
  institution    String?
  current_rating Int?               @default(0)
  streak         Int?               @default(0)
  branch         EngineeringBranch? @default(mechanical)
  updatedAt      DateTime           @updatedAt
  createdAt      DateTime           @default(now())
}

model Rating {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic     QuestionTopics
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @db.Uuid
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
}

model Challenge {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  start_time  BigInt
  end_time    BigInt
  type        ChallengeType
  total_marks Int
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  Question    Question[]
}

model Question {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  challenge         Challenge           @relation(fields: [challengeId], references: [id])
  challengeId       String              @db.Uuid
  topic             QuestionTopics
  question          String
  option_one        String
  option_two        String
  option_three      String
  option_four       String
  correct_option    CorrectOptionType
  updatedAt         DateTime            @updatedAt
  createdAt         DateTime            @default(now())
  difficulty        QuestionDifficulty
  QuestionAttempted QuestionAttempted[]
}

model ChallengeAttempted {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            String
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.Uuid
  Challenge       String
  points_obtained Int
  total_points    Int
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
}

model QuestionAttempted {
  id         String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question   Question             @relation(fields: [questionId], references: [id])
  questionId String               @db.Uuid
  result     QuestionAnswerResult
  user       User                 @relation(fields: [userId], references: [id])
  userId     String               @db.Uuid
}
